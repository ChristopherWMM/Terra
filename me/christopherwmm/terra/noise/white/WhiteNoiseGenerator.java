package me.christopherwmm.terra.noise.white;

import java.util.Random;

import me.christopherwmm.terra.noise.NoiseGenerator;
import me.christopherwmm.terra.noise.mask.NoiseMask;
import me.christopherwmm.terra.noise.mask.NoiseMaskGenerator;

/**
 * A concrete subclass of {@link NoiseGenerator} used to generate pseudo-random {@link WhiteNoise} objects.
 * 
 * @since 1.0
 * @author ChristopherWMM
 */
public class WhiteNoiseGenerator extends NoiseGenerator<WhiteNoise> {
	/** The non-zero integer height used by this {@link WhiteNoiseGenerator} to create a new {@link WhiteNoise} object. */
	private int height;

	/** The non-zero integer width used by this {@link WhiteNoiseGenerator} to create a new {@link WhiteNoise} object. */
	private int width;

	/** The long seed used by this {@link WhiteNoiseGenerator} to create a new {@link WhiteNoise} object. */
	private long seed;

	/** The 2D double array containing the individual values of the generated {@link WhiteNoise} used by this {@link WhiteNoiseGenerator} to create a new {@link WhiteNoise} object. */
	private double[][] noise;

	/** The {@link NoiseMask} intensity used by this {@link WhiteNoiseGenerator} to create a new {@link WhiteNoise} object. */
	private double noiseMaskIntensity;

	/** The {@link NoiseMask} used by this {@link WhiteNoiseGenerator} to create a new {@link WhiteNoise} object. */
	private NoiseMask noiseMask;

	/** The {@link Random} object used by this {@link WhiteNoiseGenerator} to create a new {@link WhiteNoise} object. */
	private final Random random;

	/**
	 * Constructs a new {@link WhiteNoiseGenerator} object with default values.
	 * @since 1.0
	 */
	public WhiteNoiseGenerator() {
		this.height = 512;
		this.width = 512;
		this.seed = 0;
		this.noise = new double[this.height][this.width];
		this.noiseMaskIntensity = 0;
		this.noiseMask = new NoiseMaskGenerator()
							.height(this.height)
							.width(this.width)
							.intensity(this.noiseMaskIntensity)
							.generate();

		this.random = new Random();
	}

	/**
	 * Sets the non-zero integer height used by this {@link WhiteNoiseGenerator} to create a new {@link WhiteNoise} object.
	 * 
	 * @param height The desired height of the generated {@link WhiteNoise} object.
	 * @return The {@link WhiteNoiseGenerator} object with the desired height.
	 * @throws IllegalArgumentException if the given height is negative.
	 * @since 1.0
	 */
	public WhiteNoiseGenerator height(final int height) throws IllegalArgumentException {
		if (height < 1) {
			throw new IllegalArgumentException("A white noise map height must be a positive, non-zero value. " + height + " is too small.");
		}

		this.height = height;
		return this;
	}

	/**
	 * Sets the non-zero integer width used by this {@link WhiteNoiseGenerator} to create a new {@link WhiteNoise} object.
	 * 
	 * @param width The desired width of the generated {@link WhiteNoise} object.
	 * @return The {@link WhiteNoiseGenerator} object with the desired width.
	 * @throws IllegalArgumentException if the given width is negative.
	 * @since 1.0
	 */
	public WhiteNoiseGenerator width(final int width) throws IllegalArgumentException {
		if (width < 1) {
			throw new IllegalArgumentException("A white noise map width must be a positive, non-zero value. " + width + " is too small.");
		}

		this.width = width;
		return this;
	}

	/**
	 * Sets the long seed used by this {@link WhiteNoiseGenerator} to create a new {@link WhiteNoise} object.
	 * 
	 * @param seed The desired long seed of the generated {@link WhiteNoise} object.
	 * @return The {@link WhiteNoiseGenerator} object with the desired long seed.
	 * @since 1.0
	 */
	public WhiteNoiseGenerator seed(final long seed) {
		this.seed = seed;
		this.random.setSeed(seed);
		return this;
	}

	/**
	 * Sets the {@link NoiseMask} intensity used by this {@link WhiteNoiseGenerator} to create a new {@link WhiteNoise} object.
	 * 
	 * @param noiseMaskIntensity The desired {@link NoiseMask} intensity of the generated {@link WhiteNoise} object.
	 * @return The {@link WhiteNoiseGenerator} object with the desired {@link NoiseMask} intensity.
	 * @throws IllegalArgumentException if the given {@link NoiseMask} intensity is outside of the valid range [0-1].
	 * @since 1.0
	 */
	public WhiteNoiseGenerator noiseMask(final double noiseMaskIntensity) throws IllegalArgumentException {
		if (noiseMaskIntensity < 0 || noiseMaskIntensity > 1) {
			throw new IllegalArgumentException("A white noise mask intensity must be a positive value between zero and one. " + noiseMaskIntensity + " is outside that interval.");
		}

		this.noiseMaskIntensity = noiseMaskIntensity;
		return this;
	}

	/**
	 * Constructs a new {@link WhiteNoise} object with the specific corresponding parameters entered into this {@link WhiteNoiseGenerator} object.
	 * 
	 * @return The {@link WhiteNoise} object generated by this {@link WhiteNoiseGenerator} object.
	 * @since 1.0
	 */
	@Override
	public WhiteNoise generate() {
		this.noiseMask = new NoiseMaskGenerator()
				.height(this.height)
				.width(this.width)
				.intensity(this.noiseMaskIntensity)
				.generate();

		this.noise = generateNoiseArray();

		return new WhiteNoise(this.height, this.width, this.seed, this.noise, this.noiseMask);
	}

	/**
	 * Generates the {@link WhiteNoise} value at the specified x and y coordinates based on the specific parameters entered into this {@link NoiseGenerator} object.
	 * 
	 * @param x The non-zero integer x coordinate of the T value being generated.
	 * @param y The non-zero integer x coordinate of the T value being generated.
	 * @return The WhiteNoise value for the specified x and y coordinates.
	 * @since 1.0
	 */
	@Override
	protected double generateNoiseValue(final int x, final int y) {
		return this.random.nextDouble();
	}

	/**
	 * Generates the 2D array of {@link WhiteNoise} values corresponding to the parameters entered into this {@link WhiteNoiseGenerator} object.
	 * 
	 * @return The 2D array of WhiteNoise values corresponding to the entered parameters.
	 * @since 1.0
	 */
	@Override
	protected double[][] generateNoiseArray() {
		double[][] noise = new double[this.height][this.width];
		double[][] maskNoise = this.noiseMask.getMask();

		for (int y = 0; y < this.height; y++) {
			for (int x = 0; x < this.width; x++) {
				noise[y][x] = generateNoiseValue(x, y);
				noise[y][x] = Math.max(0, noise[y][x] - maskNoise[y][x]);
			}
		}

		return noise;
	}
}
